generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SL_DATABASE_URL")
}

model bot_commands {
  id           String   @id(map: "bc_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  bot_id       BigInt
  cmd_type     Int
  groups       String[] @default(["Default"])
  name         String
  vote_locked  Boolean  @default(false)
  description  String
  args         String[] @default([])
  examples     String[] @default([])
  premium_only Boolean  @default(false)
  notes        String[] @default([])
  doc_link     String?
  nsfw         Boolean? @default(false)
  lynxtag      String   @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  bots         bots     @relation(fields: [bot_id], references: [bot_id], onDelete: Cascade, map: "bots_fk")
}

model bot_events {
  bot_id     BigInt
  event_type Int
  ts         DateTime @default(now()) @db.Timestamptz(6)
  reason     String
  css        String   @default("")
  id         String   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  lynxtag    String   @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  bots       bots     @relation(fields: [bot_id], references: [bot_id], onDelete: Cascade, map: "bots_fk")
}

model bot_list_feature {
  feature_id  Int     @id
  name        String  @unique
  iname       String  @unique
  description String?
  positive    Int?
  lynxtag     String  @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
}

model bot_list_tags {
  id       String     @unique
  icon     String     @unique
  lynxtag  String     @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  bot_tags bot_tags[]
}

model bot_owner {
  bot_id  BigInt
  owner   BigInt
  main    Boolean? @default(false)
  id      Int      @default(autoincrement())
  lynxtag String   @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  bots    bots     @relation(fields: [bot_id], references: [bot_id], onDelete: Cascade, map: "bots_fk")
}

model bot_packs {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  icon        String?
  banner      String?
  owner       BigInt
  bots        BigInt[]  @default([])
  description String
  name        String
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  lynxtag     String    @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
}

model bot_promotions {
  id      String  @id(map: "promotions_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  bot_id  BigInt?
  title   String?
  info    String?
  css     String?
  type    Int?    @default(3)
  lynxtag String  @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  bots    bots?   @relation(fields: [bot_id], references: [bot_id], onDelete: Cascade, map: "bots_fk")
}

model bot_stats_votes_pm {
  bot_id  BigInt?
  votes   BigInt?
  epoch   BigInt?
  lynxtag String  @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
}

model bot_tags {
  bot_id        BigInt
  tag           String
  id            Int           @default(autoincrement())
  lynxtag       String        @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  bots          bots          @relation(fields: [bot_id], references: [bot_id], onDelete: Cascade, map: "bots_fk")
  bot_list_tags bot_list_tags @relation(fields: [tag], references: [id], onDelete: Cascade, map: "tags_fk")
}

model bot_voters {
  bot_id     BigInt
  user_id    BigInt
  timestamps DateTime[] @default(dbgenerated("'{\"2022-03-20 16:36:11.388973+00\"}'::timestamp with time zone[]")) @db.Timestamptz
  lynxtag    String     @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  users      users      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "users_fk")
}

model bots {
  bot_id                BigInt           @unique(map: "bot_id_unique")
  votes                 BigInt?          @default(0)
  guild_count           BigInt?          @default(0)
  shard_count           BigInt?          @default(0)
  bot_library           String?
  webhook               String?
  description           String
  long_description      String
  prefix                String?
  api_token             String?          @unique
  banner_card           String?
  created_at            DateTime         @default(now()) @db.Timestamptz(6)
  invite                String           @default("")
  features              String[]
  invite_amount         Int?             @default(0)
  user_count            BigInt?          @default(0)
  css                   String?          @default("")
  shards                Int[]            @default([])
  username_cached       String           @default("")
  state                 Int              @default(1)
  long_description_type Int
  verifier              BigInt?
  last_stats_post       DateTime         @default(now()) @db.Timestamptz(6)
  webhook_secret        String?
  webhook_type          Int?
  di_text               String?
  id                    BigInt
  banner_page           String?
  total_votes           BigInt?          @default(0)
  client_id             BigInt?
  flags                 Int[]            @default([])
  uptime_checks_total   Int?             @default(0)
  uptime_checks_failed  Int?             @default(0)
  page_style            Int              @default(0)
  webhook_hmac_only     Boolean?         @default(false)
  last_updated_at       DateTime         @default(now()) @db.Timestamptz(6)
  avatar_cached         String           @default("")
  disc_cached           String           @default("")
  extra_links           Json             @default("{}")
  lynxtag               String           @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  bot_commands          bot_commands[]
  bot_events            bot_events[]
  bot_owner             bot_owner[]
  bot_promotions        bot_promotions[]
  bot_tags              bot_tags[]

  @@index([bot_id], map: "bots_index")
}

model extra_data {
  name    String?
  value   Json?
  user_id BigInt?
  lynxtag String  @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  users   users?  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "users_fk")
}

model features {
  id          String
  name        String
  description String
  viewed_as   String
  lynxtag     String @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
}

model frostpaw_clients {
  id             String
  name           String
  domain         String
  privacy_policy String
  secret         String
  owner_id       BigInt
  lynxtag        String  @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  verified       Boolean @default(false)
  users          users   @relation(fields: [owner_id], references: [user_id], onDelete: Cascade, map: "user_fk")
}

model leave_of_absence {
  reason         String?
  estimated_time Unsupported("interval")?
  start_date     DateTime?                @default(now()) @db.Timestamptz(6)
  user_id        BigInt?
  id             Int                      @default(autoincrement())
  lynxtag        String                   @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  users          users?                   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "user_fk")
}

model lynx_apps {
  user_id     BigInt?
  app_id      String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  questions   Json?
  answers     Json?
  app_version Int?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  lynxtag     String    @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  users       users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "user_fk")
}

model lynx_data {
  default_user_experiments Int[]
  id                       Int    @id @default(autoincrement())
  lynxtag                  String @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
}

model lynx_logs {
  user_id      BigInt
  method       String
  url          String
  status_code  Int
  request_time DateTime? @default(now()) @db.Timestamptz(6)
  lynxtag      String    @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  users        users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "user_fk")
}

model lynx_notifications {
  acked_users BigInt[] @default([])
  message     String
  type        String
  id          String   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  staff_only  Boolean? @default(false)
  lynxtag     String   @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
}

model lynx_ratings {
  id              String  @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  feedback        String
  username_cached String
  user_id         BigInt?
  page            String
  lynxtag         String  @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  users           users?  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "users_fk")
}

model lynx_survey_responses {
  id              String       @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  questions       Json
  answers         Json
  username_cached String
  user_id         BigInt?
  survey_id       String       @db.Uuid
  lynxtag         String       @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  lynx_surveys    lynx_surveys @relation(fields: [survey_id], references: [id], onDelete: Cascade, map: "survey_fkey")
  users           users?       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "users_fk")
}

model lynx_surveys {
  id                    String                  @id(map: "survey_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title                 String
  questions             Json
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  lynxtag               String                  @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  lynx_survey_responses lynx_survey_responses[]
}

model migration {
  id       Int      @id @default(autoincrement())
  name     String   @default("") @db.VarChar(200)
  app_name String   @default("") @db.VarChar(200)
  ran_on   DateTime @default(now()) @db.Timestamp(6)
  lynxtag  String   @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
}

model piccolo_user {
  id         Int       @id @default(autoincrement())
  username   String    @unique @default("") @db.VarChar(100)
  password   String    @default("") @db.VarChar(255)
  email      String    @unique @default("") @db.VarChar(255)
  active     Boolean   @default(false)
  admin      Boolean   @default(false)
  first_name String?   @default("") @db.VarChar(255)
  last_name  String?   @default("") @db.VarChar(255)
  superuser  Boolean   @default(false)
  last_login DateTime? @db.Timestamp(6)
  lynxtag    String    @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
}

model platform_map {
  fates_id    Decimal @db.Decimal
  platform_id String
  lynxtag     String  @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
}

model push_notifications {
  id      String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id BigInt
  token   String @unique(map: "push_notifications_endpoint_key")
  users   users  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "user_fk")
}

model review_votes {
  id      String  @db.Uuid
  user_id BigInt
  upvote  Boolean
  lynxtag String  @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  reviews reviews @relation(fields: [id], references: [id], onDelete: Cascade)
  users   users   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "users_fk")

  @@id([id, user_id])
}

model reviews {
  id            String         @id(map: "bot_reviews_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  target_id     BigInt
  user_id       BigInt
  star_rating   Decimal        @default(0.0) @db.Decimal(4, 2)
  review_text   String
  flagged       Boolean        @default(false)
  epoch         BigInt[]       @default([])
  target_type   Int?           @default(0)
  parent_id     String?        @db.Uuid
  lynxtag       String         @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  review_votes  review_votes[]
  reviews       reviews?       @relation("reviewsToreviews", fields: [parent_id], references: [id], onDelete: Cascade, map: "review_parent_id")
  other_reviews reviews[]      @relation("reviewsToreviews")
  users         users          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "users_fk")
}

model server_audit_logs {
  guild_id         BigInt
  user_id          BigInt
  username         String
  user_guild_perms String
  field            String
  value            String
  action_time      DateTime @default(now()) @db.Timestamptz(6)
  action_id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  lynxtag          String   @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  servers          servers  @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade, map: "servers_fk")
  users            users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "user_fk")
}

model server_tags {
  id           String @unique
  name         String @unique
  owner_guild  BigInt
  iconify_data String
  lynxtag      String @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
}

model server_voters {
  guild_id   BigInt
  user_id    BigInt
  timestamps DateTime[] @default(dbgenerated("'{\"2022-03-20 16:36:33.784499+00\"}'::timestamp with time zone[]")) @db.Timestamptz
  lynxtag    String     @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  users      users      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "users_fk")
}

model servers {
  guild_id              BigInt              @unique
  votes                 BigInt?             @default(0)
  webhook               String?
  description           String              @default("No description set")
  long_description      String              @default("No long description set! Set one with /settings longdesc Long description")
  css                   String?             @default("")
  api_token             String              @unique
  invite_amount         Int?                @default(0)
  invite_url            String?
  name_cached           String
  long_description_type Int?                @default(0)
  state                 Int                 @default(0)
  created_at            DateTime            @default(now()) @db.Timestamptz(6)
  avatar_cached         String?             @default("Unlisted")
  invite_channel        BigInt?
  guild_count           BigInt?             @default(0)
  banner_card           String?
  banner_page           String?
  webhook_secret        String?
  webhook_type          Int?                @default(1)
  total_votes           BigInt?             @default(0)
  tags                  String[]            @default([])
  owner_id              BigInt
  flags                 Int[]               @default([])
  autorole_votes        BigInt[]            @default([])
  whitelist_form        String?
  webhook_hmac_only     Boolean?            @default(false)
  old_state             Int                 @default(0)
  user_whitelist        BigInt[]            @default([])
  user_blacklist        BigInt[]            @default([])
  extra_links           Json                @default("{}")
  lynxtag               String              @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  server_audit_logs     server_audit_logs[]
  users                 users               @relation(fields: [owner_id], references: [user_id], onDelete: Cascade, map: "user_fk")
}

model sessions {
  id              Int      @id @default(autoincrement())
  token           String   @default("") @db.VarChar(100)
  user_id         Int      @default(0)
  expiry_date     DateTime @default(dbgenerated("(CURRENT_TIMESTAMP + '01:00:00'::interval)")) @db.Timestamp(6)
  max_expiry_date DateTime @default(dbgenerated("(CURRENT_TIMESTAMP + '7 days'::interval)")) @db.Timestamp(6)
  lynxtag         String   @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
}

model user_bot_logs {
  user_id     BigInt
  bot_id      BigInt
  action_time DateTime @default(now()) @db.Timestamptz(6)
  action      Int
  context     String?
  lynxtag     String   @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  users       users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "users_fk")
}

model user_connections {
  user_id       BigInt
  client_id     String
  refresh_token String
  expires_on    DateTime @default(dbgenerated("(now() + '7 days'::interval)")) @db.Timestamptz(6)
  lynxtag       String   @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  users         users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "user_fk")
}

model user_server_vote_table {
  user_id    BigInt    @id
  guild_id   BigInt
  expires_on DateTime? @default(dbgenerated("(now() + '08:00:00'::interval)")) @db.Timestamptz(6)
  lynxtag    String    @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  users      users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "users_fk")
}

model user_vote_table {
  user_id    BigInt    @id
  bot_id     BigInt
  expires_on DateTime? @default(dbgenerated("(now() + '08:00:00'::interval)")) @db.Timestamptz(6)
  lynxtag    String    @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  users      users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "users_fk")
}

model users {
  user_id                           BigInt                  @unique(map: "user_unique")
  api_token                         String
  description                       String?                 @default("This user prefers to be an enigma")
  badges                            String[]
  username                          String?
  user_css                          String?                 @default("")
  state                             Int                     @default(0)
  coins                             Int?                    @default(0)
  id                                BigInt
  site_lang                         String?                 @default("default")
  profile_css                       String                  @default("")
  vote_reminders                    BigInt[]                @default([])
  vote_reminder_channel             BigInt?
  staff_verify_code                 String?
  vote_reminders_last_acked         DateTime                @default(now()) @db.Timestamptz(6)
  vote_reminders_servers            BigInt[]                @default([])
  vote_reminders_servers_last_acked DateTime                @default(now()) @db.Timestamptz(6)
  vote_reminder_servers_channel     BigInt?
  experiments                       Int[]                   @default([])
  flags                             Int[]                   @default([])
  extra_links                       Json                    @default("{}")
  supabase_id                       String?                 @db.Uuid
  totp_shared_key                   String?
  staff_password                    String?
  lynxtag                           String                  @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
  bot_voters                        bot_voters[]
  extra_data                        extra_data[]
  frostpaw_clients                  frostpaw_clients[]
  leave_of_absence                  leave_of_absence[]
  lynx_apps                         lynx_apps[]
  lynx_logs                         lynx_logs[]
  lynx_ratings                      lynx_ratings[]
  lynx_survey_responses             lynx_survey_responses[]
  push_notifications                push_notifications[]
  review_votes                      review_votes[]
  reviews                           reviews[]
  server_audit_logs                 server_audit_logs[]
  server_voters                     server_voters[]
  servers                           servers[]
  user_bot_logs                     user_bot_logs[]
  user_connections                  user_connections[]
  user_server_vote_table            user_server_vote_table?
  user_vote_table                   user_vote_table?
}

model vanity {
  type       Int?
  vanity_url String? @unique(map: "constraintname")
  redirect   BigInt? @unique
  lynxtag    String  @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
}

model ws_events {
  id      BigInt
  type    String
  ts      DateTime @default(now()) @db.Timestamptz(6)
  event   Json
  lynxtag String   @unique @default(dbgenerated("uuid_generate_v4()")) @map("_lynxtag") @db.Uuid
}
